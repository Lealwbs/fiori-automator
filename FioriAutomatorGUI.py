import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import pyautogui as py
import pyperclip as pc
import keyboard as kb
import time
import threading
from datetime import datetime

class FioriAutomatorGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("Fiori Automator - Interface Gr√°fica")
        self.root.geometry("800x700")
        self.root.configure(bg='#f0f0f0')
        
        # Vari√°veis de controle
        self.is_running = False
        self.stop_execution = False
        
        # Dados organizados por categorias
        self.dados_categorias = {
            "GLOBAL": [
                ["S4TAX_0001", "/S4TAX/0001", "Configura√ß√µes de ambiente"],
                ["S4TAX_0002", "/S4TAX/0002", "Configura√ß√µes de comunica√ß√£o"],
                ["S4TAX_0003", "/S4TAX/0003", "Habilitar tipo de documento fiscal"],
                ["S4TAX_0004", "/S4TAX/0004", "Monitor de requisi√ß√µes ao Orbit"],
                ["S4TAX_0005", "/S4TAX/0005", "Cadastro de Grupos SAP <-> Orbit"],
                ["S4TAX_0006", "/S4TAX/0006", "Cadastro de Empresas SAP <-> Orbit"],
                ["S4TAX_0007", "/S4TAX/0007", "Cadastro de Filiais SAP <-> Orbit"],
                ["S4TAX_0008", "/S4TAX/0008", "Versionamento de Produtos"],
                ["S4TAX_0009", "/S4TAX/0009", "Lista de transa√ß√µes por m√≥dulos 4Tax"],
                ["S4TAX_0010", "/S4TAX/0010", "Tarefas de Instala√ß√£o"],
                ["S4TAX_0011", "/S4TAX/0011", "Exibi√ß√£o de v√°rias tabelas"],
                ["S4TAX_0012", "/S4TAX/0012", "Lista de jobs do produto"],
                ["S4TAX_0013", "/S4TAX/0013", "Status do Conector"],
                ["S4TAX_0014", "/S4TAX/0014", "Editor tabelas via CSV"],
                ["S4TAX_0015", "/S4TAX/0015", "Configura√ß√µes de envio de erros"],
                ["S4TAX_0016", "/S4TAX/0016", "Configura√ß√µes tabelas CUTE"],
                ["S4TAX_0017", "/S4TAX/0017", "Configura√ß√µes campos CUTE"],
                ["S4TAX_CUTE", "/S4TAX/CUTE", "Editor de tabelas customizado"],
                ["S4TAX_MENU", "/S4TAX/MENU", "Lista de transa√ß√µes por m√≥dulos 4Tax"],
                ["S4TAX_TASKS", "/S4TAX/TASKS", "Tarefas de instala√ß√£o"],
            ],
            "OUTBOUND": [
                ["S4TAX_CCE_PRINT", "/S4TAX/CCE_PRINT", "Impress√£o de carta de corre√ß√£o dfe's"],
                ["S4TAX_DFE_001", "/S4TAX/DFE_001", "Configura√ß√£o de e-mail para DFE's"],
                ["S4TAX_DFE_002", "/S4TAX/DFE_002", "Configura√ß√µes gerais DF-e"],
                ["S4TAX_DFE_003", "/S4TAX/DFE_003", "Gerador de c√≥pias de dfe's"],
                ["S4TAX_DFE_004", "/S4TAX/DFE_004", "Status de documentos fiscais"],
                ["S4TAX_DFE_005", "/S4TAX/DFE_005", "Download de dfe's em massa Remoto"],
                ["S4TAX_DFE_006", "/S4TAX/DFE_006", "Gerador de dfe's mockadas"],
                ["S4TAX_DFE_007", "/S4TAX/DFE_007", "Envia e-mail com danfe/xml"],
                ["S4TAX_DFE_008", "/S4TAX/DFE_008", "Programa para simular emiss√µes"],
                ["S4TAX_DFE_009", "/S4TAX/DFE_009", "Configura√ß√£o modelos e-mail DFE"],
                ["S4TAX_DFE_010", "/S4TAX/DFE_010", "Carga dos XMLs do SAP GRC NFe"],
                ["S4TAX_DFE_011", "/S4TAX/DFE_011", "Download de dfe's em massa local"],
                ["S4TAX_DFE_012", "/S4TAX/DFE_012", "Concilia√ß√£o de documentos"],
                ["S4TAX_DFE_013", "/S4TAX/DFE_013", "URL base do servi√ßo de consulta"],
                ["S4TAX_STATUS", "/S4TAX/STATUS", "Status de documentos fiscais"],
            ],
            "NFS-e": [
                ["S4TAX_NFSE_001", "/S4TAX/NFSE_001", "Cadastro de categorias de nota NFS-e"],
                ["S4TAX_NFSE_002", "/S4TAX/NFSE_002", "Valores customizados do item NFS-e"],
                ["S4TAX_NFSE_003", "/S4TAX/NFSE_003", "Valores customizados da filial NFS-e"],
                ["S4TAX_NFSE_004", "/S4TAX/NFSE_004", "Impostos NFS-e definidos na pricing"],
                ["S4TAX_NFSE_005", "/S4TAX/NFSE_005", "Intervalo de numera√ß√£o para RPS NFSe"],
                ["S4TAX_NFSE_006", "/S4TAX/NFSE_006", "Configura√ß√£o Filial -> Munic√≠pio"],
                ["S4TAX_NFSE_007", "/S4TAX/NFSE_007", "Motivos de cancelamento NFS-e"],
                ["S4TAX_NFSE_008", "/S4TAX/NFSE_008", "Tipos de impostos NFS-e"],
                ["S4TAX_NFSE_009", "/S4TAX/NFSE_009", "Munic√≠pios com emiss√£o por arquivo"],
                ["S4TAX_NFSE_010", "/S4TAX/NFSE_010", "Configura√ß√µes default NFse"],
                ["S4TAX_NFSE_011", "/S4TAX/NFSE_011", "Monitor de NFS-e"],
                ["S4TAX_NFSE_012", "/S4TAX/NFSE_012", "Dashboard para documentos NFS-e"],
                ["S4TAX_NFSE_013", "/S4TAX/NFSE_013", "Editor de dados para documentos NFSe"],
                ["S4TAX_NFSE_MONITOR", "/S4TAX/NFSE_MONITOR", "Monitor de NFS-e"],
            ],
            "4UNITY": [
                ["S4TAX_SUPP_001", "/S4TAX/SUPP_001", "Configura√ß√µes gerais 4unity"],
                ["S4TAX_SUPP_002", "/S4TAX/SUPP_002", "Etapas documentos 4Unity"],
                ["S4TAX_SUPP_003", "/S4TAX/SUPP_003", "Editor de dados de documentos 4Unity"],
                ["S4TAX_SUPP_004", "/S4TAX/SUPP_004", "Monitor 4Unity"],
                ["S4TAX_SUPP_005", "/S4TAX/SUPP_005", "Reintegra√ß√£o de fornecedores"],
                ["S4TAX_SUPP_006", "/S4TAX/SUPP_006", "Cadastro tag 4Unity em massa"],
                ["S4TAX_SUPP_007", "/S4TAX/SUPP_007", "Monitor pedido de compras"],
                ["S4TAX_SUPP_008", "/S4TAX/SUPP_008", "Carga de parceiros para integra√ß√£o"],
            ],
            "PARCEIRO": [
                ["S4TAX_PART_001", "/S4TAX/PART_001", "Integrar Parceiro de Neg√≥cio"],
            ],
            "4SERVICE": [
                ["S4TAX_4SER_001", "/S4TAX/4SER_001", "Monitor apontamentos 4Service"],
                ["S4TAX_4SER_002", "/S4TAX/4SER_002", "Relat√≥rio de horas apontadas (CSV)"],
                ["S4TAX_4SER_003", "/S4TAX/4SER_003", "Configura√ß√µes b√°sicas 4service"],
                ["S4TAX_4SER_004", "/S4TAX/4SER_004", "Configura√ß√µes de integra√ß√£o 4Service"],
            ],
            "BANK": [
                ["S4TAX_BANK_001", "/S4TAX/BANK_001", "Configura√ß√µes de contas"],
                ["S4TAX_BANK_002", "/S4TAX/BANK_002", "Configura√ß√£o geral"],
                ["S4TAX_BANK_003", "/S4TAX/BANK_003", "Monitor de boletos banc√°rios"],
                ["S4TAX_BANK_004", "/S4TAX/BANK_004", "Impostos para considerar descontos"],
                ["S4TAX_BANK_005", "/S4TAX/BANK_005", "Configura√ß√µes de Emiss√£o Autom√°tica"],
                ["S4TAX_BANK_006", "/S4TAX/BANK_006", "Configura√ß√µes de Data de Compensa√ß√£o"],
            ]
        }
        
        # Controle de categorias selecionadas (apenas GLOBAL e OUTBOUND ativas por padr√£o)
        self.categorias_ativas = {
            "GLOBAL": True,
            "OUTBOUND": True,
            "NFS-e": False,
            "4UNITY": False,
            "PARCEIRO": True,  # Era a √∫nica outra que estava ativa no original
            "4SERVICE": False,
            "BANK": False
        }
        
        # Dados filtrados baseados na sele√ß√£o
        self.dados = self.get_dados_filtrados()
        
        self.setup_ui()
    
    def get_dados_filtrados(self):
        """Retorna dados filtrados baseados nas categorias selecionadas"""
        dados_filtrados = []
        for categoria, ativa in self.categorias_ativas.items():
            if ativa:
                dados_filtrados.extend(self.dados_categorias[categoria])
        return dados_filtrados
    
    def atualizar_dados(self):
        """Atualiza a lista de dados baseada na sele√ß√£o de categorias"""
        self.dados = self.get_dados_filtrados()
        # Atualiza o contador no log
        total_itens = len(self.dados)
        categorias_ativas = [cat for cat, ativa in self.categorias_ativas.items() if ativa]
        self.log_message(f"üìä Dados atualizados: {total_itens} itens em {len(categorias_ativas)} categorias")
        self.log_message(f"üè∑Ô∏è Categorias ativas: {', '.join(categorias_ativas)}")
        
    def abrir_selecao_dados(self):
        """Abre janela para sele√ß√£o de categorias de dados"""
        self.janela_dados = tk.Toplevel(self.root)
        self.janela_dados.title("üìã Configurar Dados para Processamento")
        self.janela_dados.geometry("800x720")
        self.janela_dados.configure(bg='#f0f0f0')
        self.janela_dados.transient(self.root)
        self.janela_dados.grab_set()
        
        # T√≠tulo
        titulo_frame = tk.Frame(self.janela_dados, bg='#34495e', height=60)
        titulo_frame.pack(fill='x', padx=10, pady=(10, 0))
        titulo_frame.pack_propagate(False)
        
        tk.Label(titulo_frame, text="üéØ Selecionar Categorias de Dados", 
                font=('Arial', 14, 'bold'), fg='white', bg='#34495e').pack(expand=True)
        
        # Frame principal
        main_frame = tk.Frame(self.janela_dados, bg='#f0f0f0')
        main_frame.pack(fill='both', expand=True, padx=10, pady=10)
        
        # Instru√ß√µes
        instrucoes = tk.Label(main_frame, 
                             text="Selecione as categorias que deseja processar:\n"
                                  "‚úÖ = Incluir na execu√ß√£o  |  ‚ùå = Excluir da execu√ß√£o",
                             font=('Arial', 10), bg='#f0f0f0', fg='#2c3e50')
        instrucoes.pack(pady=(0, 10))
        
        # Frame para checkboxes com scroll
        canvas_frame = tk.Frame(main_frame, bg='#f0f0f0')
        canvas_frame.pack(fill='both', expand=True)
        
        canvas = tk.Canvas(canvas_frame, bg='#f0f0f0')
        scrollbar = ttk.Scrollbar(canvas_frame, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg='#f0f0f0')
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # Vari√°veis de controle para checkboxes
        self.categoria_vars = {}
        
        # Criar checkboxes para cada categoria
        for categoria, dados_cat in self.dados_categorias.items():
            categoria_frame = tk.LabelFrame(scrollable_frame, 
                                          text=f"üìÅ {categoria} ({len(dados_cat)} itens)",
                                          font=('Arial', 11, 'bold'),
                                          bg='#ecf0f1', fg='#2c3e50')
            categoria_frame.pack(fill='x', padx=5, pady=5)
            
            # Checkbox para categoria
            var = tk.BooleanVar(value=self.categorias_ativas[categoria])
            self.categoria_vars[categoria] = var
            
            checkbox = tk.Checkbutton(categoria_frame, 
                                    text=f"Incluir categoria {categoria}",
                                    variable=var,
                                    font=('Arial', 10, 'bold'),
                                    bg='#ecf0f1',
                                    command=lambda cat=categoria: self.toggle_categoria(cat))
            checkbox.pack(anchor='w', padx=10, pady=5)
            
            # Lista de itens da categoria (primeiros 5 + total)
            items_frame = tk.Frame(categoria_frame, bg='#ecf0f1')
            items_frame.pack(fill='x', padx=20, pady=(0, 10))
            
            for i, item in enumerate(dados_cat[:5]):  # Mostrar apenas os primeiros 5
                item_text = f"‚Ä¢ {item[0]} - {item[2]}"
                tk.Label(items_frame, text=item_text, 
                        font=('Arial', 8), bg='#ecf0f1', fg='#34495e',
                        anchor='w').pack(fill='x')
            
            if len(dados_cat) > 5:
                tk.Label(items_frame, 
                        text=f"... e mais {len(dados_cat) - 5} itens",
                        font=('Arial', 8, 'italic'), 
                        bg='#ecf0f1', fg='#7f8c8d',
                        anchor='w').pack(fill='x')
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Bot√µes de a√ß√£o
        botoes_frame = tk.Frame(main_frame, bg='#f0f0f0')
        botoes_frame.pack(fill='x', pady=(10, 0))
        
        # Bot√µes de sele√ß√£o r√°pida
        tk.Button(botoes_frame, text="‚úÖ Selecionar Tudo", 
                 command=self.selecionar_todas_categorias,
                 font=('Arial', 9), bg='#27ae60', fg='white').pack(side='left', padx=(0, 5))
        
        tk.Button(botoes_frame, text="‚ùå Deselecionar Tudo", 
                 command=self.deselecionar_todas_categorias,
                 font=('Arial', 9), bg='#e74c3c', fg='white').pack(side='left', padx=5)
        
        tk.Button(botoes_frame, text="üîÑ Apenas GLOBAL + OUTBOUND", 
                 command=self.selecionar_basico,
                 font=('Arial', 9), bg='#3498db', fg='white').pack(side='left', padx=5)
        
        # Bot√µes principais
        tk.Button(botoes_frame, text="üíæ Aplicar", 
                 command=self.aplicar_selecao_dados,
                 font=('Arial', 10, 'bold'), bg='#27ae60', fg='white',
                 width=10).pack(side='right', padx=(5, 0))
        
        tk.Button(botoes_frame, text="‚ùå Cancelar", 
                 command=self.janela_dados.destroy,
                 font=('Arial', 10), bg='#95a5a6', fg='white',
                 width=10).pack(side='right')
    
    def toggle_categoria(self, categoria):
        """Alterna o estado de uma categoria"""
        pass  # A vari√°vel j√° √© atualizada automaticamente
    
    def selecionar_todas_categorias(self):
        """Seleciona todas as categorias"""
        for var in self.categoria_vars.values():
            var.set(True)
    
    def deselecionar_todas_categorias(self):
        """Deseleciona todas as categorias"""
        for var in self.categoria_vars.values():
            var.set(False)
    
    def selecionar_basico(self):
        """Seleciona apenas GLOBAL e OUTBOUND"""
        for categoria, var in self.categoria_vars.items():
            var.set(categoria in ['GLOBAL', 'OUTBOUND'])
    
    def aplicar_selecao_dados(self):
        """Aplica a sele√ß√£o de categorias"""
        # Atualiza as categorias ativas
        for categoria, var in self.categoria_vars.items():
            self.categorias_ativas[categoria] = var.get()
        
        # Verifica se pelo menos uma categoria foi selecionada
        if not any(self.categorias_ativas.values()):
            messagebox.showwarning("Aviso", "Pelo menos uma categoria deve ser selecionada!")
            return
        
        # Atualiza os dados
        self.atualizar_dados()
        
        # Fecha a janela
        self.janela_dados.destroy()
        
        messagebox.showinfo("Sucesso", f"Configura√ß√£o atualizada!\n"
                                      f"Total de itens selecionados: {len(self.dados)}")
        
        # Atualiza a interface principal
        self.atualizar_interface_principal()
    
    def atualizar_interface_principal(self):
        """Atualiza elementos da interface principal baseado na sele√ß√£o"""
        # Atualiza o label de total de itens no final das instru√ß√µes
        total_itens = len(self.dados)
        categorias_ativas = [cat for cat, ativa in self.categorias_ativas.items() if ativa]
        
        # Atualiza o contador na interface
        self.contador_label.config(text=f"üìä {total_itens} itens selecionados")
        
        # Adiciona informa√ß√£o no status
        self.update_status(f"Pronto - {total_itens} itens selecionados", '#27ae60')
        
    def setup_ui(self):
        # T√≠tulo principal
        title_frame = tk.Frame(self.root, bg='#2c3e50', height=80)
        title_frame.pack(fill='x', padx=10, pady=(10, 0))
        title_frame.pack_propagate(False)
        
        title_label = tk.Label(title_frame, text="üöÄ Fiori Automator", 
                              font=('Arial', 18, 'bold'), 
                              fg='white', bg='#2c3e50')
        title_label.pack(expand=True)
        
        # Frame principal
        main_frame = tk.Frame(self.root, bg='#f0f0f0')
        main_frame.pack(fill='both', expand=True, padx=10, pady=10)
        
        # Frame de configura√ß√µes
        config_frame = tk.LabelFrame(main_frame, text="‚öôÔ∏è Configura√ß√µes", 
                                   font=('Arial', 12, 'bold'),
                                   bg='#f0f0f0', fg='#2c3e50')
        config_frame.pack(fill='x', pady=(0, 10))
        
        # Linha 1: √çndice Inicial e Tempo de Espera
        row1_frame = tk.Frame(config_frame, bg='#f0f0f0')
        row1_frame.pack(fill='x', padx=10, pady=10)
        
        # √çndice Inicial
        tk.Label(row1_frame, text="√çndice Inicial:", 
                font=('Arial', 10), bg='#f0f0f0').pack(side='left')
        self.index_var = tk.StringVar(value="0")
        index_entry = tk.Entry(row1_frame, textvariable=self.index_var, 
                              width=10, font=('Arial', 10))
        index_entry.pack(side='left', padx=(5, 20))
        
        # Tempo de Espera
        tk.Label(row1_frame, text="Tempo de Espera (s):", 
                font=('Arial', 10), bg='#f0f0f0').pack(side='left')
        self.tempo_var = tk.StringVar(value="1.5")
        tempo_entry = tk.Entry(row1_frame, textvariable=self.tempo_var, 
                              width=10, font=('Arial', 10))
        tempo_entry.pack(side='left', padx=5)
        
        # Linha 2: Bot√£o Configurar Dados
        row2_frame = tk.Frame(config_frame, bg='#f0f0f0')
        row2_frame.pack(fill='x', padx=10, pady=(5, 10))
        
        config_dados_btn = tk.Button(row2_frame, text="üìã Configurar Dados", 
                                   command=self.abrir_selecao_dados,
                                   font=('Arial', 10, 'bold'),
                                   bg='#3498db', fg='white',
                                   width=20, height=1)
        config_dados_btn.pack(side='left')
        
        # Label com contador de itens selecionados
        self.contador_label = tk.Label(row2_frame, 
                                     text=f"üìä {len(self.dados)} itens selecionados",
                                     font=('Arial', 10), bg='#f0f0f0', fg='#2c3e50')
        self.contador_label.pack(side='left', padx=(20, 0))
        
        # Frame de sele√ß√£o de script
        script_frame = tk.LabelFrame(main_frame, text="üìã Selecionar Script", 
                                   font=('Arial', 12, 'bold'),
                                   bg='#f0f0f0', fg='#2c3e50')
        script_frame.pack(fill='x', pady=(0, 10))
        
        # Radio buttons para sele√ß√£o de script
        self.script_var = tk.StringVar(value="atribuicoes")
        
        radio_frame = tk.Frame(script_frame, bg='#f0f0f0')
        radio_frame.pack(padx=10, pady=10)
        
        tk.Radiobutton(radio_frame, text="üìù Criar Atribui√ß√µes de Destino", 
                      variable=self.script_var, value="atribuicoes",
                      font=('Arial', 10), bg='#f0f0f0').pack(anchor='w')
        
        tk.Radiobutton(radio_frame, text="üß© Adicionar Bloco", 
                      variable=self.script_var, value="bloco",
                      font=('Arial', 10), bg='#f0f0f0').pack(anchor='w')
        
        # Frame de controle
        control_frame = tk.Frame(main_frame, bg='#f0f0f0')
        control_frame.pack(fill='x', pady=(0, 10))
        
        # Bot√µes de controle
        self.start_btn = tk.Button(control_frame, text="‚ñ∂Ô∏è Executar", 
                                  command=self.start_execution,
                                  font=('Arial', 12, 'bold'),
                                  bg='#27ae60', fg='white',
                                  width=15, height=2)
        self.start_btn.pack(side='left', padx=(0, 10))
        
        self.stop_btn = tk.Button(control_frame, text="‚èπÔ∏è Parar", 
                                 command=self.stop_execution_func,
                                 font=('Arial', 12, 'bold'),
                                 bg='#e74c3c', fg='white',
                                 width=15, height=2,
                                 state='disabled')
        self.stop_btn.pack(side='left')
        
        # Status
        status_frame = tk.Frame(main_frame, bg='#f0f0f0')
        status_frame.pack(fill='x', pady=(0, 10))
        
        tk.Label(status_frame, text="Status:", 
                font=('Arial', 10, 'bold'), bg='#f0f0f0').pack(side='left')
        self.status_label = tk.Label(status_frame, text="Pronto para executar", 
                                   font=('Arial', 10), bg='#f0f0f0', fg='#27ae60')
        self.status_label.pack(side='left', padx=5)
        
        # Progresso
        self.progress = ttk.Progressbar(main_frame, length=400, mode='determinate')
        self.progress.pack(fill='x', pady=(0, 10))
        
        # Log de execu√ß√£o
        log_frame = tk.LabelFrame(main_frame, text="üìÑ Log de Execu√ß√£o", 
                                font=('Arial', 12, 'bold'),
                                bg='#f0f0f0', fg='#2c3e50')
        log_frame.pack(fill='both', expand=True)
        
        self.log_text = scrolledtext.ScrolledText(log_frame, height=15, 
                                                 font=('Consolas', 9),
                                                 bg='#2c3e50', fg='#ecf0f1')
        self.log_text.pack(fill='both', expand=True, padx=10, pady=10)
        
        # Instru√ß√µes iniciais
        self.log_message("=== FIORI AUTOMATOR INICIADO ===")
        self.log_message("üìå INSTRU√á√ïES:")
        self.log_message("1. Configure o √çndice Inicial (quantos itens j√° foram processados)")
        self.log_message("2. Ajuste o Tempo de Espera conforme a velocidade do sistema")
        self.log_message("3. Use 'Configurar Dados' para selecionar categorias desejadas")
        self.log_message("4. Selecione o script desejado")
        self.log_message("5. Posicione o SAP na tela correta antes de executar")
        self.log_message("6. Para 'Adicionar Bloco': use CTRL para controlar o avan√ßo")
        self.log_message(f"üìä Total de itens dispon√≠veis: {len(self.dados)} (todas as categorias)")
        categorias_ativas = [cat for cat, ativa in self.categorias_ativas.items() if ativa]
        self.log_message(f"üè∑Ô∏è Categorias ativas: {', '.join(categorias_ativas)}")
        self.log_message("="*50)
        
    def log_message(self, message):
        timestamp = datetime.now().strftime("%H:%M:%S")
        formatted_message = f"[{timestamp}] {message}\n"
        self.log_text.insert(tk.END, formatted_message)
        self.log_text.see(tk.END)
        self.root.update_idletasks()
        
    def update_status(self, status, color='#27ae60'):
        self.status_label.config(text=status, fg=color)
        self.root.update_idletasks()
        
    def type_text(self, string):
        pc.copy(string)
        py.hotkey("ctrl", "v")
        
    def criar_atribuicoes_destino(self, index_inicio, tempo_espera):
        qtde_dados = len(self.dados)
        self.progress.config(maximum=qtde_dados)
        
        self.log_message(f"üöÄ Iniciando Cria√ß√£o de Atribui√ß√µes de Destino")
        self.log_message(f"‚öôÔ∏è √çndice inicial: {index_inicio}, Tempo espera: {tempo_espera}s")
        
        # Aguarda posicionamento
        self.update_status("Aguardando posicionamento (2s)...", '#f39c12')
        time.sleep(2)
        
        for i in range(qtde_dados):
            if self.stop_execution:
                self.log_message("‚èπÔ∏è Execu√ß√£o interrompida pelo usu√°rio")
                break
                
            if index_inicio > 0:
                index_inicio -= 1
                self.progress['value'] = i + 1
                continue

            objeto = self.dados[i][0]
            transacao = self.dados[i][1]
            descricao = self.dados[i][2]
            
            self.update_status(f"Processando {i+1}/{qtde_dados}: {objeto}", '#3498db')
            self.log_message(f"üìù Processando: {objeto} - {descricao}")

            try:
                py.click()  # Criar atribui√ß√£o de Destino
                time.sleep(tempo_espera * 5)

                py.press('tab', 2)  # Objeto Sem√¢ntico
                self.type_text(objeto)
                time.sleep(tempo_espera)

                py.press('tab', 1)  # A√ß√£o
                self.type_text('display')
                py.press('enter')
                time.sleep(tempo_espera)

                py.press('tab', 1)  # Tipo de Aplica√ß√£o
                self.type_text('Transa√ß√£o')
                time.sleep(tempo_espera/2)
                py.press('enter')
                time.sleep(tempo_espera)

                py.press('tab', 1)  # T√≠tulo
                self.type_text(descricao)
                py.press('enter')
                time.sleep(tempo_espera)

                py.press('tab', 1)  # Transa√ß√£o
                self.type_text(transacao)
                py.press('enter')
                time.sleep(tempo_espera)

                py.press('tab', 11)  # Gravar
                time.sleep(tempo_espera / 2)
                py.press('enter')
                time.sleep(tempo_espera * 7)

                self.log_message(f"‚úÖ {objeto} - {descricao} cadastrado com sucesso")
                
            except Exception as e:
                self.log_message(f"‚ùå Erro ao processar {objeto}: {str(e)}")
                
            self.progress['value'] = i + 1
            self.root.update_idletasks()
            
        if not self.stop_execution:
            self.log_message("üéâ Cria√ß√£o de Atribui√ß√µes de Destino CONCLU√çDA!")
            
    def adicionar_bloco(self, index_inicio, tempo_espera):
        qtde_dados = len(self.dados)
        self.progress.config(maximum=qtde_dados)
        
        self.log_message(f"üß© Iniciando Adi√ß√£o de Blocos")
        self.log_message(f"‚öôÔ∏è √çndice inicial: {index_inicio}, Tempo espera: {tempo_espera}s")
        self.log_message("‚å®Ô∏è Use CTRL para avan√ßar para o pr√≥ximo item")
        
        # Aguarda posicionamento
        self.update_status("Aguardando posicionamento (2s)...", '#f39c12')
        time.sleep(2)
        
        for i in range(qtde_dados):
            if self.stop_execution:
                self.log_message("‚èπÔ∏è Execu√ß√£o interrompida pelo usu√°rio")
                break
                
            if index_inicio > 0:
                index_inicio -= 1
                self.progress['value'] = i + 1
                continue

            objeto = self.dados[i][0]
            transacao = self.dados[i][1]
            descricao = self.dados[i][2]
            
            self.update_status(f"Aguardando CTRL para {i+1}/{qtde_dados}: {objeto}", '#f39c12')
            self.log_message(f"‚å®Ô∏è Pressione CTRL para processar: {objeto} - {descricao}")

            try:
                # Aguarda o usu√°rio pressionar CTRL
                kb.wait('ctrl')
                time.sleep(tempo_espera * 2)
                
                self.update_status(f"Processando {i+1}/{qtde_dados}: {objeto}", '#3498db')

                py.press('tab', 1)  # T√≠tulo
                py.press('del')
                self.type_text(descricao)
                time.sleep(tempo_espera)

                py.press('tab', 3)  # S√≠mbolo
                self.type_text('sap-icon://settings')
                time.sleep(tempo_espera)

                py.press('tab', 3)  # Objeto Sem√¢ntico
                self.type_text(objeto)
                py.press('enter')
                time.sleep(tempo_espera)

                py.press('tab', 1)  # A√ß√£o
                self.type_text('display')
                py.press('enter')
                time.sleep(tempo_espera)

                py.press('tab', 6)  # Gravar
                time.sleep(tempo_espera / 2)
                py.press('enter')
                time.sleep(tempo_espera * 7)

                self.log_message(f"‚úÖ {i} | {objeto} - {descricao} bloco adicionado")
                
            except Exception as e:
                self.log_message(f"‚ùå Erro ao processar {objeto}: {str(e)}")
                
            self.progress['value'] = i + 1
            self.root.update_idletasks()
            
        if not self.stop_execution:
            self.log_message("üéâ Adi√ß√£o de Blocos CONCLU√çDA!")
    
    def start_execution(self):
        try:
            index_inicio = int(self.index_var.get())
            tempo_espera = float(self.tempo_var.get())
        except ValueError:
            messagebox.showerror("Erro", "Por favor, insira valores num√©ricos v√°lidos!")
            return
            
        if index_inicio < 0 or tempo_espera <= 0:
            messagebox.showerror("Erro", "Valores devem ser positivos!")
            return
            
        # Confirma√ß√£o
        script_nome = "Criar Atribui√ß√µes de Destino" if self.script_var.get() == "atribuicoes" else "Adicionar Bloco"
        resultado = messagebox.askyesno("Confirmar Execu√ß√£o", 
                                       f"Executar: {script_nome}\n"
                                       f"√çndice Inicial: {index_inicio}\n"
                                       f"Tempo de Espera: {tempo_espera}s\n\n"
                                       f"Certifique-se de que o SAP est√° posicionado corretamente!\n"
                                       f"Continuar?")
        
        if not resultado:
            return
            
        # Configurar interface para execu√ß√£o
        self.is_running = True
        self.stop_execution = False
        self.start_btn.config(state='disabled')
        self.stop_btn.config(state='normal')
        self.progress['value'] = 0
        
        # Executar em thread separada
        if self.script_var.get() == "atribuicoes":
            thread = threading.Thread(target=self.run_atribuicoes, 
                                     args=(index_inicio, tempo_espera))
        else:
            thread = threading.Thread(target=self.run_bloco, 
                                     args=(index_inicio, tempo_espera))
        
        thread.daemon = True
        thread.start()
        
    def run_atribuicoes(self, index_inicio, tempo_espera):
        try:
            self.criar_atribuicoes_destino(index_inicio, tempo_espera)
        except Exception as e:
            self.log_message(f"‚ùå Erro durante execu√ß√£o: {str(e)}")
        finally:
            self.finish_execution()
            
    def run_bloco(self, index_inicio, tempo_espera):
        try:
            self.adicionar_bloco(index_inicio, tempo_espera)
        except Exception as e:
            self.log_message(f"‚ùå Erro durante execu√ß√£o: {str(e)}")
        finally:
            self.finish_execution()
    
    def stop_execution_func(self):
        self.stop_execution = True
        self.log_message("‚èπÔ∏è Solicita√ß√£o de parada enviada...")
        self.update_status("Parando execu√ß√£o...", '#e74c3c')
        
    def finish_execution(self):
        self.is_running = False
        self.start_btn.config(state='normal')
        self.stop_btn.config(state='disabled')
        
        if self.stop_execution:
            self.update_status("Execu√ß√£o interrompida", '#e74c3c')
        else:
            self.update_status("Execu√ß√£o conclu√≠da", '#27ae60')
            
        self.log_message("="*50)

def main():
    root = tk.Tk()
    app = FioriAutomatorGUI(root)
    
    # Configurar fechamento da aplica√ß√£o
    def on_closing():
        if app.is_running:
            if messagebox.askokcancel("Sair", "Execu√ß√£o em andamento. Deseja realmente sair?"):
                app.stop_execution = True
                root.destroy()
        else:
            root.destroy()
    
    root.protocol("WM_DELETE_WINDOW", on_closing)
    root.mainloop()

if __name__ == "__main__":
    main()